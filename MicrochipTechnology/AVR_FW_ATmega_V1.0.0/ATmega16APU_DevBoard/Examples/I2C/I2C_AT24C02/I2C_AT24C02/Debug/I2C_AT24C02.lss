
I2C_AT24C02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a44  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006da  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000446  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000273  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 31       	cpi	r26, 0x16	; 22
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  7a:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
#define EEPROM_ADDR 0xA0    // Device address for block 0
#define SCL_FREQ 100000UL   // I2C clock frequency = 100kHz

// UART Functions
void UART_init(void) {
	UBRRH = (UBRR_VAL >> 8);    // Set baud rate
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VAL;
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN) | (1<<TXEN);  // Enable receiver and transmitter
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (3<<UCSZ0); // 8-bit data, 1 stop bit
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
  90:	08 95       	ret

00000092 <UART_transmit>:
}

void UART_transmit(uint8_t data) {
	while (!(UCSRA & (1<<UDRE)));   // Wait for empty transmit buffer
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UART_transmit>
	UDR = data;                    // Send data
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <UART_print>:
}

void UART_print(char* str) {
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	while (*str) {
  a0:	88 81       	ld	r24, Y
  a2:	88 23       	and	r24, r24
  a4:	31 f0       	breq	.+12     	; 0xb2 <UART_print+0x18>
  a6:	21 96       	adiw	r28, 0x01	; 1
		UART_transmit(*str++);
  a8:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit>
	while (!(UCSRA & (1<<UDRE)));   // Wait for empty transmit buffer
	UDR = data;                    // Send data
}

void UART_print(char* str) {
	while (*str) {
  ac:	89 91       	ld	r24, Y+
  ae:	81 11       	cpse	r24, r1
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <UART_print+0xe>
		UART_transmit(*str++);
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <UART_print_hex>:

void UART_print_hex(uint8_t value) {
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	61 97       	sbiw	r28, 0x11	; 17
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	18 2f       	mov	r17, r24
	char hex[] = "0123456789ABCDEF";
  d0:	81 e1       	ldi	r24, 0x11	; 17
  d2:	e0 e6       	ldi	r30, 0x60	; 96
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <UART_print_hex+0x22>
	UART_transmit('0');
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit>
	UART_transmit('x');
  e8:	88 e7       	ldi	r24, 0x78	; 120
  ea:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit>
	UART_transmit(hex[value >> 4]);    // High nibble
  ee:	81 2f       	mov	r24, r17
  f0:	82 95       	swap	r24
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	80 81       	ld	r24, Z
 102:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit>
	UART_transmit(hex[value & 0x0F]);  // Low nibble
 106:	1f 70       	andi	r17, 0x0F	; 15
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e1 0f       	add	r30, r17
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit>
}
 11a:	61 96       	adiw	r28, 0x11	; 17
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <TWI_init>:

// TWI/I2C Functions
void TWI_init(void) {
	TWBR = ((F_CPU/SCL_FREQ)-16)/2;
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
 132:	11 b8       	out	0x01, r1	; 1
 134:	08 95       	ret

00000136 <TWI_start>:
}

void TWI_start(void) {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 136:	84 ea       	ldi	r24, 0xA4	; 164
 138:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <TWI_start+0x4>
}
 140:	08 95       	ret

00000142 <TWI_stop>:

void TWI_stop(void) {
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 142:	84 e9       	ldi	r24, 0x94	; 148
 144:	86 bf       	out	0x36, r24	; 54
	while (TWCR & (1<<TWSTO));
 146:	06 b6       	in	r0, 0x36	; 54
 148:	04 fc       	sbrc	r0, 4
 14a:	fd cf       	rjmp	.-6      	; 0x146 <TWI_stop+0x4>
}
 14c:	08 95       	ret

0000014e <TWI_write>:

void TWI_write(uint8_t data) {
	TWDR = data;
 14e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 154:	06 b6       	in	r0, 0x36	; 54
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <TWI_write+0x6>
}
 15a:	08 95       	ret

0000015c <TWI_read_nack>:

uint8_t TWI_read_nack(void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 160:	06 b6       	in	r0, 0x36	; 54
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <TWI_read_nack+0x4>
	return TWDR;
 166:	83 b1       	in	r24, 0x03	; 3
}
 168:	08 95       	ret

0000016a <EEPROM_write>:

// EEPROM Functions
void EEPROM_write(uint8_t address, uint8_t data) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	d8 2f       	mov	r29, r24
 170:	c6 2f       	mov	r28, r22
	TWI_start();
 172:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_start>
	TWI_write(EEPROM_ADDR);
 176:	80 ea       	ldi	r24, 0xA0	; 160
 178:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	TWI_write(address);
 17c:	8d 2f       	mov	r24, r29
 17e:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	TWI_write(data);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	TWI_stop();
 188:	0e 94 a1 00 	call	0x142	; 0x142 <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e0       	ldi	r24, 0x0F	; 15
 18e:	97 e2       	ldi	r25, 0x27	; 39
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <EEPROM_write+0x26>
 194:	00 c0       	rjmp	.+0      	; 0x196 <EEPROM_write+0x2c>
 196:	00 00       	nop
	_delay_ms(5);
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <EEPROM_read>:

uint8_t EEPROM_read(uint8_t address) {
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
	uint8_t data;
	TWI_start();
 1a2:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_start>
	TWI_write(EEPROM_ADDR);
 1a6:	80 ea       	ldi	r24, 0xA0	; 160
 1a8:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	TWI_write(address);
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	TWI_start();
 1b2:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_start>
	TWI_write(EEPROM_ADDR | 1);
 1b6:	81 ea       	ldi	r24, 0xA1	; 161
 1b8:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_write>
	data = TWI_read_nack();
 1bc:	0e 94 ae 00 	call	0x15c	; 0x15c <TWI_read_nack>
 1c0:	c8 2f       	mov	r28, r24
	TWI_stop();
 1c2:	0e 94 a1 00 	call	0x142	; 0x142 <TWI_stop>
	return data;
}
 1c6:	8c 2f       	mov	r24, r28
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <main>:

int main(void) {
	// Initialize peripherals
	UART_init();
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	TWI_init();
 1d0:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_init>
	uint8_t test_address = 0x10;
	uint8_t test_data = 0xAA;
	uint8_t read_data;
	
	// Test sequence
	UART_print("EEPROM Test Starting...\n\r");
 1d4:	81 e7       	ldi	r24, 0x71	; 113
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
	
	// Write test
	UART_print("Writing 0xAA to address 0x10\n\r");
 1dc:	8b e8       	ldi	r24, 0x8B	; 139
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
	EEPROM_write(test_address, test_data);
 1e4:	6a ea       	ldi	r22, 0xAA	; 170
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	0e 94 b5 00 	call	0x16a	; 0x16a <EEPROM_write>
	
	// Read test
	UART_print("Reading from address 0x10: ");
 1ec:	8a ea       	ldi	r24, 0xAA	; 170
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
	read_data = EEPROM_read(test_address);
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	0e 94 cf 00 	call	0x19e	; 0x19e <EEPROM_read>
 1fa:	c8 2f       	mov	r28, r24
	UART_print_hex(read_data);
 1fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_print_hex>
	UART_print("\n\r");
 200:	88 e8       	ldi	r24, 0x88	; 136
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
	
	// Verify
	if (read_data == test_data) {
 208:	ca 3a       	cpi	r28, 0xAA	; 170
 20a:	29 f4       	brne	.+10     	; 0x216 <main+0x4a>
		UART_print("Test Passed: Written and read values match\n\r");
 20c:	86 ec       	ldi	r24, 0xC6	; 198
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
 214:	04 c0       	rjmp	.+8      	; 0x21e <main+0x52>
		} else {
		UART_print("Test Failed: Values don't match\n\r");
 216:	83 ef       	ldi	r24, 0xF3	; 243
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_print>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x52>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
