
TIM_TimeBaseINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000607  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer0_Init>:

volatile uint8_t overflow_count = 0;  // Volatile because it’s modified in ISR

void Timer0_Init(void) 
{
	TCCR0 = (1 << CS02) | (1 << CS00);  // Prescaler 1024
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;                         // Start at 0
  80:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << TOIE0);             // Enable Timer0 overflow interrupt
  82:	89 b7       	in	r24, 0x39	; 57
  84:	81 60       	ori	r24, 0x01	; 1
  86:	89 bf       	out	0x39, r24	; 57
	sei();                             // Enable global interrupts
  88:	78 94       	sei
  8a:	08 95       	ret

0000008c <__vector_9>:
}

ISR(TIMER0_OVF_vect) 
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
	overflow_count++;                  // Increment on each overflow
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (overflow_count >= 15)         // ~491.52 ms (15 * 32.768 ms)
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a8:	8f 30       	cpi	r24, 0x0F	; 15
  aa:	30 f0       	brcs	.+12     	; 0xb8 <__vector_9+0x2c>
	{
		PORTB ^= (1 << PB0);           // Toggle PORTB0
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	88 bb       	out	0x18, r24	; 24
		overflow_count = 0;            // Reset counter
  b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void) 
{
	DDRB |= (1 << PB0);  // PORTB0 as output (LED)
  c6:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << PB0); // Initial state: off
  c8:	c0 98       	cbi	0x18, 0	; 24

	Timer0_Init();       // Set up Timer0 with interrupt
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Init>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x8>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
