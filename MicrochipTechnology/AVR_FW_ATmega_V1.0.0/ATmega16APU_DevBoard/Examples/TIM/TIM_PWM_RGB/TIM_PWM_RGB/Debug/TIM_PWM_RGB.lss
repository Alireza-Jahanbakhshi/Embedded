
TIM_PWM_RGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000886  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061c  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000357  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c4  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Init>:

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
	OCR1BL = green; // Green intensity
	OCR0 = blue;    // Blue intensity
  6c:	8a e6       	ldi	r24, 0x6A	; 106
  6e:	83 bf       	out	0x33, r24	; 51
  70:	bb 9a       	sbi	0x17, 3	; 23
  72:	81 ea       	ldi	r24, 0xA1	; 161
  74:	8f bd       	out	0x2f, r24	; 47
  76:	8a e0       	ldi	r24, 0x0A	; 10
  78:	8e bd       	out	0x2e, r24	; 46
  7a:	81 b3       	in	r24, 0x11	; 17
  7c:	80 63       	ori	r24, 0x30	; 48
  7e:	81 bb       	out	0x11, r24	; 17
  80:	08 95       	ret

00000082 <main>:
}

int main(void) {
	PWM_Init();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Init>
	DDRD |= (1 << PD5) | (1 << PD4); // Set PD5 and PD4 as outputs
}

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = green; // Green intensity
  8a:	18 bc       	out	0x28, r1	; 40
	OCR0 = blue;    // Blue intensity
  8c:	1c be       	out	0x3c, r1	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	39 e6       	ldi	r19, 0x69	; 105
  92:	98 e1       	ldi	r25, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x12>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1c>
  9e:	00 00       	nop
	DDRD |= (1 << PD5) | (1 << PD4); // Set PD5 and PD4 as outputs
}

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
  a0:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = green; // Green intensity
  a2:	88 bd       	out	0x28, r24	; 40
	OCR0 = blue;    // Blue intensity
  a4:	1c be       	out	0x3c, r1	; 60
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	39 e6       	ldi	r19, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x34>
  b6:	00 00       	nop
	DDRD |= (1 << PD5) | (1 << PD4); // Set PD5 and PD4 as outputs
}

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
  b8:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = green; // Green intensity
  ba:	18 bc       	out	0x28, r1	; 40
	OCR0 = blue;    // Blue intensity
  bc:	8c bf       	out	0x3c, r24	; 60
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	39 e6       	ldi	r19, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4c>
  ce:	00 00       	nop
	DDRD |= (1 << PD5) | (1 << PD4); // Set PD5 and PD4 as outputs
}

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
  d0:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = green; // Green intensity
  d2:	88 bd       	out	0x28, r24	; 40
	OCR0 = blue;    // Blue intensity
  d4:	8c bf       	out	0x3c, r24	; 60
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	39 e6       	ldi	r19, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x64>
  e6:	00 00       	nop
	DDRD |= (1 << PD5) | (1 << PD4); // Set PD5 and PD4 as outputs
}

// Function to set RGB values (0-255)
void setRGB(uint8_t red, uint8_t green, uint8_t blue) {
	OCR1AL = red;   // Red intensity
  e8:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = green; // Green intensity
  ea:	18 bc       	out	0x28, r1	; 40
	OCR0 = blue;    // Blue intensity
  ec:	1c be       	out	0x3c, r1	; 60
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	39 e6       	ldi	r19, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x72>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7c>
  fe:	00 00       	nop
 100:	c3 cf       	rjmp	.-122    	; 0x88 <main+0x6>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
