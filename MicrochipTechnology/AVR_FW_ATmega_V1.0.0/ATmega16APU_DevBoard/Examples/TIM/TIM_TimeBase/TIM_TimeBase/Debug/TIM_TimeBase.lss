
TIM_TimeBase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e5  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020a  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_Init>:
#define F_CPU 8000000UL  // Define CPU frequency as 8 MHz
#include <util/delay.h>  // Optional, for delay functions if needed

void Timer0_Init(void)
{
	TCCR0 = (1 << CS02) | (1 << CS00);  // Prescaler 1024
  6c:	85 e0       	ldi	r24, 0x05	; 5
  6e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;                         // Start counter at 0
  70:	12 be       	out	0x32, r1	; 50
  72:	08 95       	ret

00000074 <main>:
}

int main(void)
{
	DDRB = 0x01;  // Set PORTB0 as output (for LED)
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00; // Initial state: LED off
  78:	18 ba       	out	0x18, r1	; 24

	Timer0_Init(); // Initialize Timer0
  7a:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_Init>
		TIFR |= (1 << TOV0);              // Clear overflow flag
		overflow_count++;                 // Increment overflow counter

		if (overflow_count >= 15)        // ~491.52 ms (15 * 32.768 ms)
		{
			PORTB ^= 0x01;                // Toggle PORTB0 (LED)
  7e:	21 e0       	ldi	r18, 0x01	; 1
	TCCR0 = (1 << CS02) | (1 << CS00);  // Prescaler 1024
	TCNT0 = 0;                         // Start counter at 0
}

int main(void)
{
  80:	9f e0       	ldi	r25, 0x0F	; 15

	uint8_t overflow_count = 0; // To count overflows

	while (1)
	{
		while ((TIFR & (1 << TOV0)) == 0); // Wait for Timer0 overflow
  82:	08 b6       	in	r0, 0x38	; 56
  84:	00 fe       	sbrs	r0, 0
  86:	fd cf       	rjmp	.-6      	; 0x82 <main+0xe>
		TIFR |= (1 << TOV0);              // Clear overflow flag
  88:	88 b7       	in	r24, 0x38	; 56
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	88 bf       	out	0x38, r24	; 56
  8e:	91 50       	subi	r25, 0x01	; 1
		overflow_count++;                 // Increment overflow counter

		if (overflow_count >= 15)        // ~491.52 ms (15 * 32.768 ms)
  90:	c1 f7       	brne	.-16     	; 0x82 <main+0xe>
		{
			PORTB ^= 0x01;                // Toggle PORTB0 (LED)
  92:	88 b3       	in	r24, 0x18	; 24
  94:	82 27       	eor	r24, r18
  96:	88 bb       	out	0x18, r24	; 24
  98:	f3 cf       	rjmp	.-26     	; 0x80 <main+0xc>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
