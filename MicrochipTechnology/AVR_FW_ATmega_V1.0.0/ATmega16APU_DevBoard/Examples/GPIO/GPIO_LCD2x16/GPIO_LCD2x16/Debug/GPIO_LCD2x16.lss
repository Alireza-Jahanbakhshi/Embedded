
GPIO_LCD2x16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035c  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  7a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
#define LCD_ENTRY_MODE 0x06
#define LCD_DISPLAY_ON 0x0C
#define LCD_FUNCTION_SET 0x28  // 4-bit, 2 lines, 5x8 font

void lcd_command(uint8_t cmd) {
	PORTB &= ~(1 << LCD_RS);  // Command mode
  82:	c0 98       	cbi	0x18, 0	; 24
	PORTD = (PORTD & 0x0F) | (cmd & 0xF0);  // High nibble
  84:	92 b3       	in	r25, 0x12	; 18
  86:	9f 70       	andi	r25, 0x0F	; 15
  88:	28 2f       	mov	r18, r24
  8a:	20 7f       	andi	r18, 0xF0	; 240
  8c:	92 2b       	or	r25, r18
  8e:	92 bb       	out	0x12, r25	; 18
	PORTB |= (1 << LCD_E);
  90:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	32 e0       	ldi	r19, 0x02	; 2
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_command+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_command+0x18>
	_delay_us(1);
	PORTB &= ~(1 << LCD_E);
  9a:	c1 98       	cbi	0x18, 1	; 24
  9c:	ef e8       	ldi	r30, 0x8F	; 143
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_command+0x24>
  a6:	00 00       	nop
	_delay_us(200);
	
	PORTD = (PORTD & 0x0F) | ((cmd << 4) & 0xF0);  // Low nibble
  a8:	22 b3       	in	r18, 0x12	; 18
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	82 bb       	out	0x12, r24	; 18
	PORTB |= (1 << LCD_E);
  b8:	c1 9a       	sbi	0x18, 1	; 24
  ba:	32 e0       	ldi	r19, 0x02	; 2
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_command+0x40>
	_delay_us(1);
	PORTB &= ~(1 << LCD_E);
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	8f e8       	ldi	r24, 0x8F	; 143
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <lcd_data>:
	_delay_us(200);
}

void lcd_data(uint8_t data) {
	PORTB |= (1 << LCD_RS);  // Data mode
  d2:	c0 9a       	sbi	0x18, 0	; 24
	PORTD = (PORTD & 0x0F) | (data & 0xF0);  // High nibble
  d4:	92 b3       	in	r25, 0x12	; 18
  d6:	9f 70       	andi	r25, 0x0F	; 15
  d8:	28 2f       	mov	r18, r24
  da:	20 7f       	andi	r18, 0xF0	; 240
  dc:	92 2b       	or	r25, r18
  de:	92 bb       	out	0x12, r25	; 18
	PORTB |= (1 << LCD_E);
  e0:	c1 9a       	sbi	0x18, 1	; 24
  e2:	32 e0       	ldi	r19, 0x02	; 2
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_data+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_data+0x18>
	_delay_us(1);
	PORTB &= ~(1 << LCD_E);
  ea:	c1 98       	cbi	0x18, 1	; 24
  ec:	ef e8       	ldi	r30, 0x8F	; 143
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data+0x24>
  f6:	00 00       	nop
	_delay_us(200);
	
	PORTD = (PORTD & 0x0F) | ((data << 4) & 0xF0);  // Low nibble
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	82 bb       	out	0x12, r24	; 18
	PORTB |= (1 << LCD_E);
 108:	c1 9a       	sbi	0x18, 1	; 24
 10a:	32 e0       	ldi	r19, 0x02	; 2
 10c:	3a 95       	dec	r19
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x3a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_data+0x40>
	_delay_us(1);
	PORTB &= ~(1 << LCD_E);
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	8f e8       	ldi	r24, 0x8F	; 143
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_data+0x4c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcd_init>:
	_delay_us(200);
}

void lcd_init() {
	LCD_DDR |= 0xF0;   // D4-D7 as outputs
 122:	81 b3       	in	r24, 0x11	; 17
 124:	80 6f       	ori	r24, 0xF0	; 240
 126:	81 bb       	out	0x11, r24	; 17
	LCD_DDRB |= (1 << LCD_RS) | (1 << LCD_E);  // RS, E as outputs
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f e7       	ldi	r18, 0x7F	; 127
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <lcd_init+0x12>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x1c>
 13e:	00 00       	nop
	
	_delay_ms(50);  // Wait for LCD power-up
	
	// Initialize 4-bit mode
	lcd_command(0x33);  // Reset sequence
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x32);  // Set to 4-bit
 146:	82 e3       	ldi	r24, 0x32	; 50
 148:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(LCD_FUNCTION_SET);
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(LCD_DISPLAY_ON);
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(LCD_CLEAR);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(LCD_ENTRY_MODE);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 164:	8f e9       	ldi	r24, 0x9F	; 159
 166:	9f e0       	ldi	r25, 0x0F	; 15
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x46>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x4c>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <lcd_print>:
	_delay_ms(2);
}

void lcd_print(char *str) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	while (*str) {
 178:	88 81       	ld	r24, Y
 17a:	88 23       	and	r24, r24
 17c:	31 f0       	breq	.+12     	; 0x18a <lcd_print+0x18>
 17e:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(*str++);
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data>
	lcd_command(LCD_ENTRY_MODE);
	_delay_ms(2);
}

void lcd_print(char *str) {
	while (*str) {
 184:	89 91       	ld	r24, Y+
 186:	81 11       	cpse	r24, r1
 188:	fb cf       	rjmp	.-10     	; 0x180 <lcd_print+0xe>
		lcd_data(*str++);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <main>:

int main(void) {
	lcd_init();
 190:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
	lcd_print("Hello, ATmega16!");
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_print>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0xc>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
