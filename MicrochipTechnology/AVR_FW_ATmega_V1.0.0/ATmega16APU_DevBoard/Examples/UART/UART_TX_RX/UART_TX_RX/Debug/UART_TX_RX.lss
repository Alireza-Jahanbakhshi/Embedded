
UART_TX_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000826  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cc  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000404  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  7a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:

// Initialize UART
void UART_init(void)
{
	// Set baud rate to 9600 @ 8MHz
	UBRRH = 0;
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;    // Changed from 103 to 51 for 8MHz
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN) | (1<<TXEN);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
  90:	08 95       	ret

00000092 <UART_transmit_char>:

// Transmit single character
void UART_transmit_char(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSRA & (1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UART_transmit_char>
	// Put data into buffer, sends the data
	UDR = data;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <UART_receive_char>:

// Receive single character
unsigned char UART_receive_char(void)
{
	// Wait for data to be received
	while(!(UCSRA & (1<<RXC)));
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <UART_receive_char>
	// Get and return received data from buffer
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <UART_transmit_string>:

// Transmit string
void UART_transmit_string(char *str)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
	while(*str != '\0')
  a8:	88 81       	ld	r24, Y
  aa:	88 23       	and	r24, r24
  ac:	31 f0       	breq	.+12     	; 0xba <UART_transmit_string+0x18>
  ae:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_transmit_char(*str);
  b0:	0e 94 49 00 	call	0x92	; 0x92 <UART_transmit_char>
}

// Transmit string
void UART_transmit_string(char *str)
{
	while(*str != '\0')
  b4:	89 91       	ld	r24, Y+
  b6:	81 11       	cpse	r24, r1
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <UART_transmit_string+0xe>
	{
		UART_transmit_char(*str);
		str++;
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <UART_receive_string>:

// Receive string until newline or buffer full
void UART_receive_string(char *buffer, uint8_t max_length)
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	char received_char;
	
	while(i < max_length - 1)    // Leave space for null terminator
  cc:	06 2f       	mov	r16, r22
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	01 50       	subi	r16, 0x01	; 1
  d2:	11 09       	sbc	r17, r1
  d4:	10 16       	cp	r1, r16
  d6:	11 06       	cpc	r1, r17
  d8:	94 f4       	brge	.+36     	; 0xfe <UART_receive_string+0x3e>
  da:	c0 e0       	ldi	r28, 0x00	; 0
	{
		received_char = UART_receive_char();
  dc:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_receive_char>
		
		// Check for newline or carriage return
		if(received_char == '\n' || received_char == '\r')
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	71 f0       	breq	.+28     	; 0x100 <UART_receive_string+0x40>
  e4:	8d 30       	cpi	r24, 0x0D	; 13
  e6:	61 f0       	breq	.+24     	; 0x100 <UART_receive_string+0x40>
		{
			break;
		}
		
		buffer[i] = received_char;
  e8:	f7 01       	movw	r30, r14
  ea:	ec 0f       	add	r30, r28
  ec:	f1 1d       	adc	r31, r1
  ee:	80 83       	st	Z, r24
		i++;
  f0:	cf 5f       	subi	r28, 0xFF	; 255
void UART_receive_string(char *buffer, uint8_t max_length)
{
	uint8_t i = 0;
	char received_char;
	
	while(i < max_length - 1)    // Leave space for null terminator
  f2:	8c 2f       	mov	r24, r28
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	80 17       	cp	r24, r16
  f8:	91 07       	cpc	r25, r17
  fa:	84 f3       	brlt	.-32     	; 0xdc <UART_receive_string+0x1c>
  fc:	01 c0       	rjmp	.+2      	; 0x100 <UART_receive_string+0x40>
}

// Receive string until newline or buffer full
void UART_receive_string(char *buffer, uint8_t max_length)
{
	uint8_t i = 0;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
		
		buffer[i] = received_char;
		i++;
	}
	
	buffer[i] = '\0';    // Add null terminator
 100:	f7 01       	movw	r30, r14
 102:	ec 0f       	add	r30, r28
 104:	f1 1d       	adc	r31, r1
 106:	10 82       	st	Z, r1
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	08 95       	ret

00000114 <main>:
unsigned char UART_receive_char(void);
void UART_transmit_string(char *str);
void UART_receive_string(char *buffer, uint8_t max_length);

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	a0 97       	sbiw	r28, 0x20	; 32
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	char receive_buffer[32];    // Buffer to store received string
	UART_init();               // Initialize UART
 128:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	
	while(1)
	{
		// Example: Send a string
		UART_transmit_string("Hello from ATmega16!\r\n");
 12c:	80 e6       	ldi	r24, 0x60	; 96
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x26>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x30>
 144:	00 00       	nop
		_delay_ms(1000);
		
		// Receive a string
		UART_receive_string(receive_buffer, 32);
 146:	60 e2       	ldi	r22, 0x20	; 32
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_receive_string>
		
		// Echo back the received string
		UART_transmit_string("Received: ");
 150:	87 e7       	ldi	r24, 0x77	; 119
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_transmit_string>
		UART_transmit_string(receive_buffer);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_transmit_string>
		UART_transmit_string("\r\n");
 160:	84 e7       	ldi	r24, 0x74	; 116
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_transmit_string>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	89 e6       	ldi	r24, 0x69	; 105
 16c:	98 e1       	ldi	r25, 0x18	; 24
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x5a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x64>
 178:	00 00       	nop
 17a:	d8 cf       	rjmp	.-80     	; 0x12c <main+0x18>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
