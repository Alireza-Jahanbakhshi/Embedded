
UART_RS485.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000812  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  7a:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
}

char UART_receive(void) {
	while (!(UCSRA & (1 << RXC))); // Wait for data
	return UDR;
}
  82:	90 bd       	out	0x20, r25	; 32
  84:	89 b9       	out	0x09, r24	; 9
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <UART_transmit>:
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <UART_transmit>
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <UART_send_string>:
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ec 01       	movw	r28, r24
  9e:	88 81       	ld	r24, Y
  a0:	88 23       	and	r24, r24
  a2:	31 f0       	breq	.+12     	; 0xb0 <UART_send_string+0x18>
  a4:	21 96       	adiw	r28, 0x01	; 1
  a6:	0e 94 48 00 	call	0x90	; 0x90 <UART_transmit>
  aa:	89 91       	ld	r24, Y+
  ac:	81 11       	cpse	r24, r1
  ae:	fb cf       	rjmp	.-10     	; 0xa6 <UART_send_string+0xe>
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <RS485_send>:

void RS485_send(char* message) {
	PORTD |= (1 << RS485_DE_RE);  // Enable transmitter (DE=1, RE=1)
  b6:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <RS485_send+0x6>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <RS485_send+0xc>
  c2:	00 00       	nop
	_delay_ms(1); // Allow time for driver enable

	UART_send_string(message);
  c4:	0e 94 4c 00 	call	0x98	; 0x98 <UART_send_string>
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <RS485_send+0x16>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <RS485_send+0x1c>
  d2:	00 00       	nop

	_delay_ms(1); // Allow time for last bit transmission
	PORTD &= ~(1 << RS485_DE_RE); // Disable transmitter, enable receiver (DE=0, RE=0)
  d4:	92 98       	cbi	0x12, 2	; 18
  d6:	08 95       	ret

000000d8 <main>:
}

int main(void) {
	UART_init(MYUBRR);
  d8:	83 e3       	ldi	r24, 0x33	; 51
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	
	DDRD |= (1 << RS485_DE_RE); // Set DE/RE as output
  e0:	8a 9a       	sbi	0x11, 2	; 17
	PORTD &= ~(1 << RS485_DE_RE); // Start with receiver enabled (DE=0, RE=0)
  e2:	92 98       	cbi	0x12, 2	; 18
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x12>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x1c>
  f4:	00 00       	nop

	_delay_ms(1000);

	while (1) {
		RS485_send("Hello RS485\r\n");
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <RS485_send>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x2c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x36>
 10e:	00 00       	nop
 110:	f2 cf       	rjmp	.-28     	; 0xf6 <main+0x1e>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
