
UART_PS2_Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cd  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f0  00000000  00000000  00000991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007c  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

volatile uint8_t ps2_data = 0;
volatile uint8_t bit_count = 0;
volatile uint8_t received_flag = 0;

ISR(INT0_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	static uint8_t shift = 0;
	
	if (bit_count >= 1 && bit_count <= 8) {
  8c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <bit_count>
  90:	88 23       	and	r24, r24
  92:	c9 f0       	breq	.+50     	; 0xc6 <__vector_1+0x4a>
  94:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <bit_count>
  98:	89 30       	cpi	r24, 0x09	; 9
  9a:	a8 f4       	brcc	.+42     	; 0xc6 <__vector_1+0x4a>
		if (PIND & (1 << PS2_DATA)) {
  9c:	83 9b       	sbis	0x10, 3	; 16
  9e:	0e c0       	rjmp	.+28     	; 0xbc <__vector_1+0x40>
			ps2_data |= (1 << shift);
  a0:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <ps2_data>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <_edata>
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__vector_1+0x36>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <__vector_1+0x32>
  b6:	82 2b       	or	r24, r18
  b8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ps2_data>
		}
		shift++;
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
	
	bit_count++;
  c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <bit_count>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <bit_count>
	
	if (bit_count == 11) {
  d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <bit_count>
  d4:	8b 30       	cpi	r24, 0x0B	; 11
  d6:	39 f4       	brne	.+14     	; 0xe6 <__vector_1+0x6a>
		received_flag = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <received_flag>
		bit_count = 0;
  de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <bit_count>
		shift = 0;
  e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <PS2_Init>:

void PS2_Init() {
	// Configure PD2 (INT0) as input with pull-up
	DDRD &= ~(1 << PS2_CLK);
  f6:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PS2_CLK);
  f8:	92 9a       	sbi	0x12, 2	; 18

	// Configure PD3 (DATA) as input with pull-up
	DDRD &= ~(1 << PS2_DATA);
  fa:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1 << PS2_DATA);
  fc:	93 9a       	sbi	0x12, 3	; 18
	
	// Enable falling edge interrupt on INT0 (PS2_CLK)
	MCUCR |= (1 << ISC01);
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	82 60       	ori	r24, 0x02	; 2
 102:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8b bf       	out	0x3b, r24	; 59
	
	sei();  // Enable global interrupts
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <USART_Init>:
}

void USART_Init(unsigned int baud) {
	unsigned int ubrr = F_CPU / 16 / baud - 1;
 10e:	9c 01       	movw	r18, r24
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	60 e2       	ldi	r22, 0x20	; 32
 116:	71 ea       	ldi	r23, 0xA1	; 161
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 ae 00 	call	0x15c	; 0x15c <__udivmodsi4>
 120:	21 50       	subi	r18, 0x01	; 1
 122:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);
 124:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;
 126:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);  // Enable transmitter
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data
 12c:	86 e8       	ldi	r24, 0x86	; 134
 12e:	80 bd       	out	0x20, r24	; 32
 130:	08 95       	ret

00000132 <USART_Transmit>:
}

void USART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for empty transmit buffer
 132:	5d 9b       	sbis	0x0b, 5	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <USART_Transmit>
	UDR = data;
 136:	8c b9       	out	0x0c, r24	; 12
 138:	08 95       	ret

0000013a <main>:
}

int main() {
	PS2_Init();
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <PS2_Init>
	USART_Init(9600); // Initialize UART for debugging
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	95 e2       	ldi	r25, 0x25	; 37
 142:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Init>
	
	while (1) {
		if (received_flag) {
 146:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <received_flag>
 14a:	88 23       	and	r24, r24
 14c:	e1 f3       	breq	.-8      	; 0x146 <main+0xc>
			received_flag = 0;
 14e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <received_flag>
			USART_Transmit(ps2_data); // Send received data via UART
 152:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ps2_data>
 156:	0e 94 99 00 	call	0x132	; 0x132 <USART_Transmit>
 15a:	f5 cf       	rjmp	.-22     	; 0x146 <main+0xc>

0000015c <__udivmodsi4>:
 15c:	a1 e2       	ldi	r26, 0x21	; 33
 15e:	1a 2e       	mov	r1, r26
 160:	aa 1b       	sub	r26, r26
 162:	bb 1b       	sub	r27, r27
 164:	fd 01       	movw	r30, r26
 166:	0d c0       	rjmp	.+26     	; 0x182 <__udivmodsi4_ep>

00000168 <__udivmodsi4_loop>:
 168:	aa 1f       	adc	r26, r26
 16a:	bb 1f       	adc	r27, r27
 16c:	ee 1f       	adc	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	a2 17       	cp	r26, r18
 172:	b3 07       	cpc	r27, r19
 174:	e4 07       	cpc	r30, r20
 176:	f5 07       	cpc	r31, r21
 178:	20 f0       	brcs	.+8      	; 0x182 <__udivmodsi4_ep>
 17a:	a2 1b       	sub	r26, r18
 17c:	b3 0b       	sbc	r27, r19
 17e:	e4 0b       	sbc	r30, r20
 180:	f5 0b       	sbc	r31, r21

00000182 <__udivmodsi4_ep>:
 182:	66 1f       	adc	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	1a 94       	dec	r1
 18c:	69 f7       	brne	.-38     	; 0x168 <__udivmodsi4_loop>
 18e:	60 95       	com	r22
 190:	70 95       	com	r23
 192:	80 95       	com	r24
 194:	90 95       	com	r25
 196:	9b 01       	movw	r18, r22
 198:	ac 01       	movw	r20, r24
 19a:	bd 01       	movw	r22, r26
 19c:	cf 01       	movw	r24, r30
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
