
UART_PS2_Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000892  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000190  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  74:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
volatile uint8_t mouse_data[3]; // Store 3-byte packets from the mouse
volatile uint8_t bit_count = 0;
volatile uint8_t byte_index = 0;
volatile uint8_t received_flag = 0;

ISR(INT0_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
	static uint8_t shift = 0;
	static uint8_t data_byte = 0;

	if (bit_count >= 1 && bit_count <= 8) {
  8e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bit_count>
  92:	88 23       	and	r24, r24
  94:	c9 f0       	breq	.+50     	; 0xc8 <__vector_1+0x4c>
  96:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bit_count>
  9a:	89 30       	cpi	r24, 0x09	; 9
  9c:	a8 f4       	brcc	.+42     	; 0xc8 <__vector_1+0x4c>
		if (PIND & (1 << PS2_DATA)) {
  9e:	83 9b       	sbis	0x10, 3	; 16
  a0:	0e c0       	rjmp	.+28     	; 0xbe <__vector_1+0x42>
			data_byte |= (1 << shift);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <shift.1736>
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__vector_1+0x34>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <__vector_1+0x30>
  b4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  b8:	89 2b       	or	r24, r25
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		}
		shift++;
  be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <shift.1736>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <shift.1736>
	}
	
	bit_count++;
  c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bit_count>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <bit_count>

	if (bit_count == 11) {
  d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bit_count>
  d6:	8b 30       	cpi	r24, 0x0B	; 11
  d8:	e1 f4       	brne	.+56     	; 0x112 <__vector_1+0x96>
		mouse_data[byte_index] = data_byte;
  da:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <byte_index>
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e4:	eb 59       	subi	r30, 0x9B	; 155
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 83       	st	Z, r24
		byte_index++;
  ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <byte_index>
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <byte_index>

		if (byte_index == 3) { // Mouse sends 3 bytes per packet
  f4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <byte_index>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f4       	brne	.+10     	; 0x106 <__vector_1+0x8a>
			received_flag = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <received_flag>
			byte_index = 0;
 102:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <byte_index>
		}

		bit_count = 0;
 106:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <bit_count>
		shift = 0;
 10a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <shift.1736>
		data_byte = 0;
 10e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <PS2_Init>:

void PS2_Init() {
	DDRD &= ~(1 << PS2_CLK);  // Set PD2 as input
 124:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PS2_CLK);  // Enable pull-up
 126:	92 9a       	sbi	0x12, 2	; 18

	DDRD &= ~(1 << PS2_DATA); // Set PD3 as input
 128:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1 << PS2_DATA); // Enable pull-up
 12a:	93 9a       	sbi	0x12, 3	; 18

	MCUCR |= (1 << ISC01); // Falling edge trigger for INT0
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);   // Enable INT0
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 64       	ori	r24, 0x40	; 64
 136:	8b bf       	out	0x3b, r24	; 59

	sei(); // Enable global interrupts
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <USART_Init>:
}

void USART_Init(unsigned int baud) {
	unsigned int ubrr = F_CPU / 16 / baud - 1;
 13c:	9c 01       	movw	r18, r24
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e2       	ldi	r22, 0x20	; 32
 144:	71 ea       	ldi	r23, 0xA1	; 161
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);
 152:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;
 154:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);  // Enable transmitter
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data
 15a:	86 e8       	ldi	r24, 0x86	; 134
 15c:	80 bd       	out	0x20, r24	; 32
 15e:	08 95       	ret

00000160 <USART_Transmit>:
}

void USART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for buffer to be empty
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <USART_Transmit>
	UDR = data;
 164:	8c b9       	out	0x0c, r24	; 12
 166:	08 95       	ret

00000168 <Send_Mouse_Data>:
}

void Send_Mouse_Data() {
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	// First byte contains button states & overflow bits
	USART_Transmit('B');
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>
	USART_Transmit(mouse_data[0]);
 172:	c5 e6       	ldi	r28, 0x65	; 101
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	88 81       	ld	r24, Y
 178:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>

	// Second byte (X movement)
	USART_Transmit('X');
 17c:	88 e5       	ldi	r24, 0x58	; 88
 17e:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>
	USART_Transmit(mouse_data[1]);
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>

	// Third byte (Y movement)
	USART_Transmit('Y');
 188:	89 e5       	ldi	r24, 0x59	; 89
 18a:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>
	USART_Transmit(mouse_data[2]);
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <PS2_Mouse_Enable>:

void PS2_Mouse_Enable() {
	DDRD |= (1 << PS2_DATA); // Set DATA as output
 19a:	8b 9a       	sbi	0x11, 3	; 17
	PORTD &= ~(1 << PS2_DATA); // Send low signal
 19c:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	80 e7       	ldi	r24, 0x70	; 112
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <PS2_Mouse_Enable+0xa>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <PS2_Mouse_Enable+0x14>
 1ae:	00 00       	nop
	_delay_ms(100);
	
	PORTD |= (1 << PS2_CLK); // Release clock
 1b0:	92 9a       	sbi	0x12, 2	; 18
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <PS2_Mouse_Enable+0x1c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <PS2_Mouse_Enable+0x22>
 1bc:	00 00       	nop
	_delay_ms(10);
	DDRD &= ~(1 << PS2_DATA); // Set back to input
 1be:	8b 98       	cbi	0x11, 3	; 17
 1c0:	08 95       	ret

000001c2 <main>:
}

int main() {
	PS2_Init();
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <PS2_Init>
	USART_Init(9600);
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	95 e2       	ldi	r25, 0x25	; 37
 1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Init>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	80 e7       	ldi	r24, 0x70	; 112
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x12>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x1c>
 1de:	00 00       	nop

	_delay_ms(100); // Wait for PS/2 device to stabilize
	PS2_Mouse_Enable(); // Enable the PS/2 mouse
 1e0:	0e 94 cd 00 	call	0x19a	; 0x19a <PS2_Mouse_Enable>

	while (1) {
		if (received_flag) {
 1e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <received_flag>
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <main+0x22>
			received_flag = 0;
 1ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <received_flag>
			Send_Mouse_Data(); // Send the data packet via UART
 1f0:	0e 94 b4 00 	call	0x168	; 0x168 <Send_Mouse_Data>
 1f4:	f7 cf       	rjmp	.-18     	; 0x1e4 <main+0x22>

000001f6 <__udivmodsi4>:
 1f6:	a1 e2       	ldi	r26, 0x21	; 33
 1f8:	1a 2e       	mov	r1, r26
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	fd 01       	movw	r30, r26
 200:	0d c0       	rjmp	.+26     	; 0x21c <__udivmodsi4_ep>

00000202 <__udivmodsi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	ee 1f       	adc	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	a2 17       	cp	r26, r18
 20c:	b3 07       	cpc	r27, r19
 20e:	e4 07       	cpc	r30, r20
 210:	f5 07       	cpc	r31, r21
 212:	20 f0       	brcs	.+8      	; 0x21c <__udivmodsi4_ep>
 214:	a2 1b       	sub	r26, r18
 216:	b3 0b       	sbc	r27, r19
 218:	e4 0b       	sbc	r30, r20
 21a:	f5 0b       	sbc	r31, r21

0000021c <__udivmodsi4_ep>:
 21c:	66 1f       	adc	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	1a 94       	dec	r1
 226:	69 f7       	brne	.-38     	; 0x202 <__udivmodsi4_loop>
 228:	60 95       	com	r22
 22a:	70 95       	com	r23
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	bd 01       	movw	r22, r26
 236:	cf 01       	movw	r24, r30
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
